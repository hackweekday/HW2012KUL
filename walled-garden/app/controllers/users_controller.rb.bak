class UsersController < ApplicationController
  before_filter :auth_user, :except => [:new, :create]
  skip_filter :only_admin, :only => %w(messages get_paginated_messages edit_password update_password)

  def get_paginated_messages
    case params[:iSortCol_0]
    when "0"
      sort_variable = "created_at desc"
    when "3"
      sort_variable = "created_at #{params[:sSortDir_0]}"
    end
      display_msg_type = [["inbox","receiver_id"],["outbox","sender_id"]].find_all{|x| x[0] == params[:display_msg_type]}[0][1]
      @messages = Message.where("#{display_msg_type} = '#{current_user.id}' AND msg LIKE ?", "%#{params[:sSearch]}%").order("#{sort_variable}").paginate(:page => (params[:iDisplayStart].to_i/params[:iDisplayLength].to_i)+1, :per_page => params[:iDisplayLength])
      @messages_count = @messages.count
  end

  def messages

  end

  def new_message
  end

  def delete_message
    params[:msg_ids].split(",").each do |m|
      Message.find(m).destroy
    end
    render :js => "$('#dttb_message').dataTable().fnDraw();"
  end

  # GET /users
  # GET /users.json
  #layout nil
  def index
    @users = User.all

    respond_to do |format|
      format.html # index.html.erb
      format.json { render json: @users }
    end
  end

  # GET /users/1
  # GET /users/1.json
  def show
    @user = User.find(params[:id])
#    if (@current_user.id == @user.id)
      respond_to do |format|
        format.html # show.html.erb
        format.json { render json: @user }
      end
#    else
#      render :text => "You are not allowed"
#    end
  end

  # GET /users/new
  # GET /users/new.json
  def new
    @user = User.new

    respond_to do |format|
      format.html # new.html.erb
      format.json { render json: @user }
      format.js {} #~~ 
    end
  end

  # GET /users/1/edit
  def edit
    @user = User.find(params[:id])
    if (@current_user.id != @user.id)
      #render :text => "You are not allowed"
    end
  end

  # POST /users
  # POST /users.json
  def create
    @user = User.new(params[:user])
    respond_to do |format|
      if @user.save
        format.html { redirect_to users_path, notice: 'User was successfully created.' }
        format.json { render json: @user, status: :created, location: @user }
      else
        format.html { render action: "new" }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # PUT /users/1
  # PUT /users/1.json
  def update
    @user = User.find(params[:id])

    respond_to do |format|
      if @user.update_attributes(params[:user])
        format.html { redirect_to users_path, notice: 'User was successfully updated.' }
        format.json { head :ok }
      else
        format.html { render action: "edit" }
        format.json { render json: @user.errors, status: :unprocessable_entity }
      end
    end
  end

  # DELETE /users/1
  # DELETE /users/1.json
  def destroy
    @user = User.find(params[:id])
    @user.destroy

    respond_to do |format|
      format.html { redirect_to users_url }
      format.json { head :ok }
    end
  end

  def welcome

  end

  def edit_password
    @user = User.find current_user.id  
  end

  def update_password
    @user = User.find current_user.id
     user = login(@user.username, params[:user][:current_password], remember_me = false)
     if @user.update_attributes(params[:user]) && user
      @notice = "Password was updated"
      render "create_password.js"
    else
      @errors = []
      unless user
        @errors << "Invalid current password!"
      end
      @user.errors.each {|x| @errors << @user.errors[x]}
      render 'error.js'
    end
  end
end